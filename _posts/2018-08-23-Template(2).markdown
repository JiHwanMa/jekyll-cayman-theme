---
layout: default
title:  "C++ Teplate_(2)"
date:   2017-08-23 18:46:00
categories: C++
---

## Extended Template 

```
템플릿의 typename T 선언의 T에는
class 또한 가능하다. 예를들어 아래의 코드에서처럼 T 대신 Point<int> 또한 가능하다.
```

### Point.h
```c
#ifndef _POINT_TEMPLATE_H__
#define _POINT_TEMPLATE_H__

template <typename T>
class Point
{
private:
	T xpos, ypos;
public:
	Point(T x = 0, T y = 0);
	void ShowPosition() const;
};

template <typename T>
Point<T>::Point(T x, T y) :xpos(x), ypos(y) {};

template<typename T>
void Point<T>::ShowPosition() const
{
	cout << "[" << xpos << "," << ypos << "]" << endl;
}
#endif
```

### array.h 
```c
#ifndef __ARRAY_TEMPLATE_H__
#define __ARRAY_TEMPLATE_H__
#include<iostream>
#include<cstdlib>
using namespace std;

template <typename T>
class BoundCheckArray 
{
private:
	T *arr;
	int arrlen;
	BoundCheckArray(const BoundCheckArray* arr);
	BoundCheckArray& operator=(const BoundCheckArray& arr) {}

public:
	BoundCheckArray(int len);
	T& operator[] (int idx);
	T operator[](int idx) const;
	int GetArrLen() const;
	~BoundCheckArray();
};

template<typename T>
BoundCheckArray<T>::BoundCheckArray(int len) 
{
	arr = new T[len];
}

template<typename T>
T& BoundCheckArray<T>::operator[](int idx) 
{
	if (idx < 0 || idx >= arrlen) 
	{
		cout << "out of range" << endl;
		exit(1);
	}
	return arr[idx];
}
template<typename T>
T BoundCheckArray<T>::operator[](int idx) const 
{
	if (idx < 0 || idx >= arrlen) 
	{
		cout << "out of range const" << endl;
		exit(1);
	}
	return arr[idx];
}

template<typename T>
int BoundCheckArray<T>::GetArrLen() const 
{
	return arrlen;
}

template<typename T>
BoundCheckArray<T>::~BoundCheckArray() 
{
	delete[]arr;
}

#endif // !__ARRAY_TEMPLATE_H__

```

### main.cpp
```c
#include<iostream>
#include"ArrayTemplate.h"
#include"PointTemplate.h"

int main() 
{
	BoundCheckArray<Point<int>> oarr1(3);
	oarr1[0] = Point<int>(3, 4);
	oarr1[1] = Point<int>(5, 6);
	oarr1[2] = Point<int>(7, 8);

	for (int i = 0; i < 3; i++) 
	{
		oarr1[i].ShowPosition();
	}

	typedef Point<int>* POINT_PTR;

	BoundCheckArray<POINT_PTR> oparr(3);
	oparr[0] = new Point<int>(11, 12);
	oparr[0]->ShowPosition();
	delete oparr[0];
	return 0;
}
```

## 클래스 템플릿 특수화
```
클래스 템플릿을 특수화하는 이유는 특정 자료형을 기반으로 생성된 객체에 대해, 구분이 되는
다른 행동양식을 적용하기 위해서이다.
```

```
예를 들어 특정 템플릿이 char형에 대해서는 템플릿과 매우 상이하게 작동해야 할 경우
template<>
class classname<char>
{
...

}
이와같이 재정의하여 특정 경우 클래스 템플릿을 이용하여 해당 템플릿 클래스를 생성하지 않고
바로 사용함.
```

### 클래스 템플릿의 부분 특수화
```c
template<typename T1,typename T2>
class MySimple{...}

template<>
class MySimple<char,int>{...} //char,int에 대해서 전체 특수화

templte<typename T1>
class MySimple<T1,int>{...}//T2에 대해서 int로 부분 특수화. 
```

**전체 특수화가 부분 특수화보다 우선시됨.**

### 템플릿 인자

```
템플릿 매개변수에는 변수의 선언이 올 수 있다.
```

```c
tempalte<typename T,int len>
class SimpleArray
{
private:
	T arr[len];
public:
	T& operator[](int idx){return arr[idx];}

}
```

```
이 템플릿에 대해서는 디폴트 값 지정도 가능하며
해당 클래스템플릿은 
SimpleArray<int,5> i5arr;
SimpleArray<double,7> i7arr;
이런식으로 사용한다.
```

## 템플릿과 static!

```c
template <typename T>
void ShowStaticValue(void)
{
static T num=0;
num+=1;
cout<<num<<" ";
}
```

```
컴파일러에 의해서 만들어진 템플릿 함수 별로 static 지역변수가 유지된다.
즉 int,long,double에 대해서 각각 생성하였다면, 변수의 자료형이 같다면
static 지역변수를 공유한다.
```

#### static memeber 초기화
```c
template<typename T>
T SimplestaticMem<T>::mem=0;
//전체 초기화

template<>
int SimplestaticMem<int>::mem=0;
//int형 static멤버 초기화.
```
